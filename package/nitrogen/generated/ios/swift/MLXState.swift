///
/// MLXState.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `MLXState`, backed by a C++ struct.
 */
public typealias MLXState = margelo.nitro.rnmlx.MLXState

public extension MLXState {
  private typealias bridge = margelo.nitro.rnmlx.bridge.swift

  /**
   * Create a new instance of `MLXState`.
   */
  init(isLoaded: Bool, isGenerating: Bool, modelId: String, error: String?, modelInfo: String) {
    self.init(isLoaded, isGenerating, std.string(modelId), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = error {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), std.string(modelInfo))
  }

  var isLoaded: Bool {
    @inline(__always)
    get {
      return self.__isLoaded
    }
    @inline(__always)
    set {
      self.__isLoaded = newValue
    }
  }
  
  var isGenerating: Bool {
    @inline(__always)
    get {
      return self.__isGenerating
    }
    @inline(__always)
    set {
      self.__isGenerating = newValue
    }
  }
  
  var modelId: String {
    @inline(__always)
    get {
      return String(self.__modelId)
    }
    @inline(__always)
    set {
      self.__modelId = std.string(newValue)
    }
  }
  
  var error: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__error.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__error = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var modelInfo: String {
    @inline(__always)
    get {
      return String(self.__modelInfo)
    }
    @inline(__always)
    set {
      self.__modelInfo = std.string(newValue)
    }
  }
}
