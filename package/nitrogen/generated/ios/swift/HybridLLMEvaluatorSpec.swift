///
/// HybridLLMEvaluatorSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridLLMEvaluatorSpec``
public protocol HybridLLMEvaluatorSpec_protocol: HybridObject {
  // Properties
  var response: String { get set }
  var tokensPerSecond: Double { get set }
  var downloadProgress: Double { get set }
  var currentFile: String { get set }
  var error: String { get set }
  var state: ModelState { get set }

  // Methods
  func load(modelId: String) throws -> Promise<Void>
  func generate(prompt: String) throws -> Promise<Void>
  func addEventListener(eventType: LLMEvaluatorEventTypes, listener: @escaping (_ payload: AnyMapHolder) -> Void) throws -> String
  func removeEventListener(listenerId: String) throws -> Void
}

/// See ``HybridLLMEvaluatorSpec``
public class HybridLLMEvaluatorSpec_base {
  private weak var cxxWrapper: HybridLLMEvaluatorSpec_cxx? = nil
  public func getCxxWrapper() -> HybridLLMEvaluatorSpec_cxx {
  #if DEBUG
    guard self is HybridLLMEvaluatorSpec else {
      fatalError("`self` is not a `HybridLLMEvaluatorSpec`! Did you accidentally inherit from `HybridLLMEvaluatorSpec_base` instead of `HybridLLMEvaluatorSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridLLMEvaluatorSpec_cxx(self as! HybridLLMEvaluatorSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the LLMEvaluator HybridObject.
 * Implement this protocol to create Swift-based instances of LLMEvaluator.
 * ```swift
 * class HybridLLMEvaluator : HybridLLMEvaluatorSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridLLMEvaluatorSpec = HybridLLMEvaluatorSpec_protocol & HybridLLMEvaluatorSpec_base
