///
/// RNMLX-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `HybridMLXSpec` to properly resolve imports.
namespace margelo::nitro::rnmlx { class HybridMLXSpec; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridMLXSpec_cxx` to properly resolve imports.
namespace RNMLX { class HybridMLXSpec_cxx; }

// Include C++ defined types
#include "HybridMLXSpec.hpp"
#include <NitroModules/Result.hpp>
#include <exception>
#include <memory>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::rnmlx::bridge::swift {

  // pragma MARK: std::shared_ptr<margelo::nitro::rnmlx::HybridMLXSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::rnmlx::HybridMLXSpec>`.
   */
  using std__shared_ptr_margelo__nitro__rnmlx__HybridMLXSpec_ = std::shared_ptr<margelo::nitro::rnmlx::HybridMLXSpec>;
  std::shared_ptr<margelo::nitro::rnmlx::HybridMLXSpec> create_std__shared_ptr_margelo__nitro__rnmlx__HybridMLXSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__rnmlx__HybridMLXSpec_(std__shared_ptr_margelo__nitro__rnmlx__HybridMLXSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::rnmlx::HybridMLXSpec>
  using std__weak_ptr_margelo__nitro__rnmlx__HybridMLXSpec_ = std::weak_ptr<margelo::nitro::rnmlx::HybridMLXSpec>;
  inline std__weak_ptr_margelo__nitro__rnmlx__HybridMLXSpec_ weakify_std__shared_ptr_margelo__nitro__rnmlx__HybridMLXSpec_(const std::shared_ptr<margelo::nitro::rnmlx::HybridMLXSpec>& strong) { return strong; }
  
  // pragma MARK: Result<double>
  using Result_double_ = Result<double>;
  inline Result_double_ create_Result_double_(double value) {
    return Result<double>::withValue(std::move(value));
  }
  inline Result_double_ create_Result_double_(const std::exception_ptr& error) {
    return Result<double>::withError(error);
  }

} // namespace margelo::nitro::rnmlx::bridge::swift
