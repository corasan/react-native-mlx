///
/// ErrorEvent.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `RNMLXEventTypes` to properly resolve imports.
namespace margelo::nitro::rnmlx { enum class RNMLXEventTypes; }

#include "RNMLXEventTypes.hpp"
#include <string>

namespace margelo::nitro::rnmlx {

  /**
   * A struct which can be represented as a JavaScript object (ErrorEvent).
   */
  struct ErrorEvent {
  public:
    RNMLXEventTypes type     SWIFT_PRIVATE;
    std::string message     SWIFT_PRIVATE;

  public:
    explicit ErrorEvent(RNMLXEventTypes type, std::string message): type(type), message(message) {}
  };

} // namespace margelo::nitro::rnmlx

namespace margelo::nitro {

  using namespace margelo::nitro::rnmlx;

  // C++ ErrorEvent <> JS ErrorEvent (object)
  template <>
  struct JSIConverter<ErrorEvent> final {
    static inline ErrorEvent fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return ErrorEvent(
        JSIConverter<RNMLXEventTypes>::fromJSI(runtime, obj.getProperty(runtime, "type")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "message"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const ErrorEvent& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "type", JSIConverter<RNMLXEventTypes>::toJSI(runtime, arg.type));
      obj.setProperty(runtime, "message", JSIConverter<std::string>::toJSI(runtime, arg.message));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<RNMLXEventTypes>::canConvert(runtime, obj.getProperty(runtime, "type"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "message"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
