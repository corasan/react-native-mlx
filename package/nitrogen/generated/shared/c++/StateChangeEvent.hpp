///
/// StateChangeEvent.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `RNMLXEventTypes` to properly resolve imports.
namespace margelo::nitro::rnmlx { enum class RNMLXEventTypes; }
// Forward declaration of `ModelState` to properly resolve imports.
namespace margelo::nitro::rnmlx { struct ModelState; }

#include "RNMLXEventTypes.hpp"
#include "ModelState.hpp"

namespace margelo::nitro::rnmlx {

  /**
   * A struct which can be represented as a JavaScript object (StateChangeEvent).
   */
  struct StateChangeEvent {
  public:
    RNMLXEventTypes type     SWIFT_PRIVATE;
    ModelState state     SWIFT_PRIVATE;

  public:
    explicit StateChangeEvent(RNMLXEventTypes type, ModelState state): type(type), state(state) {}
  };

} // namespace margelo::nitro::rnmlx

namespace margelo::nitro {

  using namespace margelo::nitro::rnmlx;

  // C++ StateChangeEvent <> JS StateChangeEvent (object)
  template <>
  struct JSIConverter<StateChangeEvent> final {
    static inline StateChangeEvent fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return StateChangeEvent(
        JSIConverter<RNMLXEventTypes>::fromJSI(runtime, obj.getProperty(runtime, "type")),
        JSIConverter<ModelState>::fromJSI(runtime, obj.getProperty(runtime, "state"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const StateChangeEvent& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "type", JSIConverter<RNMLXEventTypes>::toJSI(runtime, arg.type));
      obj.setProperty(runtime, "state", JSIConverter<ModelState>::toJSI(runtime, arg.state));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<RNMLXEventTypes>::canConvert(runtime, obj.getProperty(runtime, "type"))) return false;
      if (!JSIConverter<ModelState>::canConvert(runtime, obj.getProperty(runtime, "state"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
