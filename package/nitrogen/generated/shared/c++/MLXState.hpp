///
/// MLXState.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>
#include <optional>

namespace margelo::nitro::rnmlx {

  /**
   * A struct which can be represented as a JavaScript object (MLXState).
   */
  struct MLXState {
  public:
    bool isLoaded     SWIFT_PRIVATE;
    bool isGenerating     SWIFT_PRIVATE;
    std::string modelId     SWIFT_PRIVATE;
    std::optional<std::string> error     SWIFT_PRIVATE;
    std::string modelInfo     SWIFT_PRIVATE;

  public:
    explicit MLXState(bool isLoaded, bool isGenerating, std::string modelId, std::optional<std::string> error, std::string modelInfo): isLoaded(isLoaded), isGenerating(isGenerating), modelId(modelId), error(error), modelInfo(modelInfo) {}
  };

} // namespace margelo::nitro::rnmlx

namespace margelo::nitro {

  using namespace margelo::nitro::rnmlx;

  // C++ MLXState <> JS MLXState (object)
  template <>
  struct JSIConverter<MLXState> final {
    static inline MLXState fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return MLXState(
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "isLoaded")),
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "isGenerating")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "modelId")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "error")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "modelInfo"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const MLXState& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "isLoaded", JSIConverter<bool>::toJSI(runtime, arg.isLoaded));
      obj.setProperty(runtime, "isGenerating", JSIConverter<bool>::toJSI(runtime, arg.isGenerating));
      obj.setProperty(runtime, "modelId", JSIConverter<std::string>::toJSI(runtime, arg.modelId));
      obj.setProperty(runtime, "error", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.error));
      obj.setProperty(runtime, "modelInfo", JSIConverter<std::string>::toJSI(runtime, arg.modelInfo));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "isLoaded"))) return false;
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "isGenerating"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "modelId"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "error"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "modelInfo"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
