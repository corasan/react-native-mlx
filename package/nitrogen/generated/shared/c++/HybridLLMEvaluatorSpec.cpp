///
/// HybridLLMEvaluatorSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridLLMEvaluatorSpec.hpp"

namespace margelo::nitro::rnmlx {

  void HybridLLMEvaluatorSpec::loadHybridMethods() {
    // load base methods/properties
    HybridObject::loadHybridMethods();
    // load custom methods/properties
    registerHybrids(this, [](Prototype& prototype) {
      prototype.registerHybridGetter("response", &HybridLLMEvaluatorSpec::getResponse);
      prototype.registerHybridSetter("response", &HybridLLMEvaluatorSpec::setResponse);
      prototype.registerHybridGetter("tokensPerSecond", &HybridLLMEvaluatorSpec::getTokensPerSecond);
      prototype.registerHybridSetter("tokensPerSecond", &HybridLLMEvaluatorSpec::setTokensPerSecond);
      prototype.registerHybridGetter("downloadProgress", &HybridLLMEvaluatorSpec::getDownloadProgress);
      prototype.registerHybridSetter("downloadProgress", &HybridLLMEvaluatorSpec::setDownloadProgress);
      prototype.registerHybridGetter("currentFile", &HybridLLMEvaluatorSpec::getCurrentFile);
      prototype.registerHybridSetter("currentFile", &HybridLLMEvaluatorSpec::setCurrentFile);
      prototype.registerHybridGetter("error", &HybridLLMEvaluatorSpec::getError);
      prototype.registerHybridSetter("error", &HybridLLMEvaluatorSpec::setError);
      prototype.registerHybridGetter("state", &HybridLLMEvaluatorSpec::getState);
      prototype.registerHybridSetter("state", &HybridLLMEvaluatorSpec::setState);
      prototype.registerHybridMethod("load", &HybridLLMEvaluatorSpec::load);
      prototype.registerHybridMethod("generate", &HybridLLMEvaluatorSpec::generate);
      prototype.registerHybridMethod("addEventListener", &HybridLLMEvaluatorSpec::addEventListener);
      prototype.registerHybridMethod("removeEventListener", &HybridLLMEvaluatorSpec::removeEventListener);
    });
  }

} // namespace margelo::nitro::rnmlx
